정규표현식 ###
grep
ed
sed ### (5장)

#1. 정규표현식 
- 와일드카드와 혼동하지 말것 
  * ? ... chapter* 
  - 1라인을 기준 
  -

  ##1. 마침표 
  - any single character
  - r. # ro, rk, rc, ....
  - .x. # xxx, oxo, ....
  - [a-zA-Z]

  ##2. ^ (caret)
  - 라인의 처음
  - [^] # not 
  - [^a-z] #소문자가 아닌

  ##3. $ (ampersand)
  - 라인의 끝
  - '^ $' #빈줄을 의미

  ##4. [리스트]
  - [a-z]
  - [a-np-z] #o를 제외한 모든 소문자.
  - [a-n][p-z]
  - grep '[Tt]he' animals.txt
  - grep -i 'the' animals.txt 

  ##5. *
  - zero or more 
  - x* # x......
  - 앞글자 한정 
  - x로 시작하는 단어
    x* (x)
    xx* (o)

  ##6. \+
  - 1개 이상 
    x\+

  ##7. \?
  - zero or one 

  ##8. \{i,j\} : 횟수를 나타낸다.
  - j :
  - i,
  - ,j
  - x\{10\} #10번 
  - ㅌ\{1,10\}

  ##9. \(regex\)
  - back referencing이 가능하다.
  - '^\(.\)\1' #동일한 알파벳 2개로 시작하는 라인 *aa... ll...
  - 숫자는 1-9까지 가능
  - abba 같은걸 확인할 수 있다.

  ##10. regex1 \| regex2
  - regex1 or regex2
  - 둘중하나 매칭되는거

# Q.
1) a-f까지 매칭
  [a-f]
2) b나 ab 매칭
  []
3) 2번 + aaaaaab 매칭
4) 모든 글자 매칭
  grep *
5) #으로 시작하는 문장 매칭
  grep ^#
6) \로 끝나는 문장 매칭
7) 대문자로 시작하지 않는 문장 매칭
8) 빈줄이 아닌 모든 줄 매칭
9) cookie나 cake이 포함된 줄 매칭
10) w. 매칭

1. grep [a-f]
2. grep 'b \| ab' 
3. grep 'b \| ab \| aa*b' 
4. grep '^' 
5. grep ^# 
6.grep \$ 
7. grep [^A-Z]  
8. grep [^'^ $']  
9. grep 'cookie \| cake' 
10. grep 'w.'


##1. 확장
[a-zA-Z0-9_] \w
\W (not)
\b : word boundary (앞뒤) h, o
\b<regex>\b
  \< 앞 \> 뒤
\B ell
\s whitespace (space, tab)
\S

#2. ed
- 텍스트 에디터
- line-oriented text editor
- 인터렉티브형
- format: ed file 
- ctrl + d 2번하면 빠져나옴
- ctrl + c 도 가능

- 치환 (a -> b)하라
  [adress][명령][정규식][flags]
  1,$s/a/b
  p    #프린트를해줘야함

Q. 모음 지우기
=> 정규표현식 연습 가능함 

#3. sed 
- stream editor
- 표준 입출력 사용가능, 파이프라인 사용 가능
- 인터렉티브 (x)
- 단위 : 라인

Q. animals.txt에서 python -> PYTHON  변경후 파일 전체 동일한 이름으로 저장하기
  tr 'python' 'PYTHON' < animals.txt 
  ; tmp ; mv tmp animals.txt

  sed -i 's/python/PYTHON/g' animals.txt

##2) sed 실행하기 
-format: sed <script> <input_file> # > <out_file>
ex) hello -> world로 바꾼 file
  sed 's/hello/world/g' file
  sed 's/hello/world/g' < file
  cat file | sed 's/hello/world/g' # 파이프라인으로 받을 수 있다.


### -i option
  - 동일한 파일에 저장한다. (in-place)
  - 임시파일을 따로 저장하고 싶을 때 -iE  # fileE

### -n option
  - p와 같이 사용하여 출력 범위를 지정한다.
    sed -n '2p' file 
  -5~10줄 출력하기
    sed -n '5,10p' file # ,가 range

Q. python이 있는 라인만 출력해줘
  sed -n '/python/p' file

  - ; 으로 여러 정규식 연결 가능
    sed -n '1p ; $p' file
    sed -n 'qp ; $p' fileA fileB fileC
    cat fileA fileB fileC | sed -n '1p ; $p'

### -e, -f
  -e : expression
  -f : file 
  sed -e '1p ; $p' -f file 
  - 옵션이 없으면 1번째가 정규 표현식, 2번째가 입력파일

  sed <option> <script> <input_file> # full format


##3) script
- format : <adress><cmd><option>
  '2p'
  - adress : 2
  - cmd : p
  - 5,10p
  - '3d'  #3번째 자리를 지워라

Q. input_file 에서 python으로 시작하는 라인 삭제하고 , hello -> world 로 변경한 뒤 out_file에 저장하라.
sed '/^python/d; s/hello/world/g' input_file > out_file
sed -e '/^python/d' -e 's/hello/world/g' input_file > out_file

Q.
1) 5번째 줄 삭제
2) python, Python 포함 줄 삭제
3) 처음 10개 줄 중 2번 실행
4) 각 줄에 첫 3글자 삭제

s'/python//g'

- p, d, s, q (quit)


### cmd 's'
- format : s/regex/replacement/flag
- g
- p : 해당부분만 매칭 되었을때 출력
- i : 대소문자 구분 없음

Q. image.jpg.1, image.jpg.2, image.jpg.3  >>  image1.jpg, image2.jpg, image3.jpg

sed s/\(\)//g   #힌트

s 치환 많이 연습하기

### address
- 범위 지정
  '2p'
  sed '160s/a/b/'
  sed '/apple/s///'   #apple이 있는 부분에서 뭔가를 하는
  sed '/apple/!s///'  # ! : not

  sed '160,200s/a/b/'  (범위)
  sed '160,2s/a/b/'    #160만 수행하고 끝
  $
  1,$~2  # step==2


# 스크립트 작서 
- 파일에 커맨드라인 입력
- 모드 변경한다.
  chmod +x file
- 실행
  name
  ./name

- 주석달기 #로 단다
- 라인단위 주석























1. 리다이렉션 (표준스트림)
  - 표준 스트림이란? 
    - 파일을 읽고 쓰는 과정처럼 데이터를 입출력하는것
    - 데이터가 연속적으로 흐른다는 특징
    - 키보드 -> 운영체제 -> 디스플레이
      - stdin
      - stdout
      - stderr
      - out/ err 다른 방식으로 (루트로) 출력된다.

  - 리다이렉션(redirection)이란?
    - 입출력 방향을 다른 곳으로 바꾼 
    - 키보드에서  입력받지 않고 파일에서 받는 것
    - 디스플레이로 -> 파일로 쓰는
    예) ls -l > 파일로 저장한다.

    - 셸의 역할이다. (운영체제와 파일을 연결하는 작업)

  1) 출력 리다이렉션
    - 출력 내용을 표준 출력이 아닌 파일로 보내 저장하는 것
    - syntax: 명령 > 파일이름 


# cat 
  - concatenate: 연속으로 이어 붙인다.
  - cat 파일이름 1, 2, 3, ....
    - 파일 1 + 2 + 3 ... 연속으로 이어붙어서 출력한다.
  - 하나 이상의 파일을 다른 여러 종류의 파일과 연결할 때 많이 사용한다.
    - 파일 복사, 합침, ..
    - 추가 >>
  ex) cat 파일1 > 파일2 : 파일2를 생성해 파일1의 내용을 복사
      cat 파일1 >> 파일2 : 파일2에 파일1의 내용을 추가 
 
  2) 입력 리다이렉션
  - 명령 < 파일  
    : 입력할 파일을 불러오는 개념
  - wc animals.txt : 프로그램이 파일의 존재를 알고 있음
  - wc < animals.txt : 리다이렉션 때문에 프로그램이 파일 존재 모름

  3) 리다일렉션이 불가능한 출력 
  - 표준오류는 리다이렉션이 불가능하다.
  - 단, '2>'를 사용하면 리다이렉션이 가능하다.
  - 2>> : 이어쓰기
  - 표준 출력과 오류 같이 리다이렉션하려면? &>
  ex) 존재하는 파일과 존재하지 않는 파일 모두 읽어서 새로운 파일 만들자.
    cat line1.txt non.txt 2> new.txt 
      : 출력값만 새파일에 저장되고 오류는 저장이되지 않는다.
    cat line1.txt non.txt &> new.txt 
      : 출력과 오류가 새파일에 모두 저장된다.

  4) 입출력 모두 다 같이 
  - 명령 < 입력파일 > 출력파일 
Q. animals.txt 에서 Perl 라인의 글자(character) 수 세고 결과를 파일로 (result). 입력도 리다이렉션 (한번에)
  grep Perl < animals.txt | wc -c > result.txt

ls, head, echo, cat 구분 잘 하기



2. Escape Letters
- 특정 문자가 가지고 있는 기능을 차단하게 해주는 기능
- \ : 역슬래시, 백슬래시

ex) \n, \t 같은걸 차단 -> \\n, \\t
    \$HOME
    
ex) 명령 i have a cat :명령이 아니라 문자열로 표현할때 '' 사용

1) '' : 제일 강력한 역할, 안에 있는 모든 기능 해제함 
echo 'this is a directory: $HOME'
this is a directory: $HOME

2) "" : 일부 기능은 해제하지 않는다.
echo "this is a directory: $HOME"
this is a directory: /home/runner

3) \ : 일부분을 지정해서 기능 해제 (문자 그대로 읽게 함)
~/OSS$ echo "home sweet home""
> "
home sweet home

~/OSS$ echo "home sweet home\""
home sweet home"

- 큰 따옴표 안에 큰 따옴표를 사용하면?
- 명령 줄 바꿔쓰기할 때 많이 쓴다.

cut -c animals.txt \
  | grep ...... \
  | head .....

- 별명 무효화 기능 
ex) alias grep="grep -w" 일때 그냥 grep을 쓰고 싶으면
    \grep



3. 검색경로
- /usr/bin
- $PATH
- : 기준으 개행 붙여 출력하라.


# tr <a> <b> : a -> b로 변경함
- 우리가 사용하는 프로그램이 저장되어 있는경로
- 셸이 검색 경로를 순차적으로 순회하며 프로그램을 가져온다.
- 검색 경로 확인 명령 : which, type
  - type은 검색경로 뿐만아니라 더 넓은 범위에서 경로 조회 (별명까지)
  - 별명이 검색경로를 우선한다.

~/OSS$ which ls
/nix/store/f11ibsj5vmqcy8ihfa8mzvpfs4af7cw5-coreutils-9.1/bin/ls
~/OSS$ type ls
ls is aliased to `ls --color=auto'
~/OSS$ alias ls
alias ls='ls --color=auto'



4. 초기화파일 
- shell environment
- 초기화파일
- 'ls -a $HOME' # -a : 숨겨진 파일까지 모두 출력
- $HOME/.bashrc
- vi 파일로 열기
- source
- 사용자가 자주 사용하는 환경 설정을 저장하여 항상 셸을 켤 때 마다 적용되도록 한다.

~/OSS$ vi $HOME/.bashrc  ##파일수정->변수 설정
~/OSS$ source $HOME/.bashrc  ##적용한내용 실행
THIS is my customized setting. runner
runner@eb30c81203ad:~/OSS$
(새로운 창을 연 느낌)



5. 명령히스토리
- command history 
- 우리가 커맨드라인에 입력한 명령들을 셸이 저장해서 가지고 있다.
- 히스토리를 사용해서 이전 명령을 불러와 재사용하는 기능을 익힌다.

  1) 히스토리 열람
  - history
  - LIFO (last in first out)

runner@eb30c81203ad:~/OSS$ history 10
   38  echo "home sweet home""
   39  "
   40  echo "home sweet home\""
   41  echo home sweet homeddkdk
   42  which ls
   43  type ls
   44  alias ls
   45  vi $HOME/.bashrc
   46  source $HOME/.bashrc
   47  history 10
runner@eb30c81203ad:~/OSS$ history
    1  ls
    2  cd notes
    ...
   47  history 10
   48  history
  
Q. 히스토리를 가장 처음부터 10개 출력하기 (1-10)
runner@eb30c81203ad:~/OSS$ history | head

Q. 전체 히스토리에서 echo만 출력하기
runner@eb30c81203ad:~/OSS$ history | grep -w echo

- history -c : 지우기

  2) 재사용 
  1. 커서링
  2. 히스토리 확장
  3. 증분 검색

    #1 커서링
    - 위아래 키를 사용하여 히스토리 열람
    - 간단하지만 느림
    - 이전 2-3개 명령일 경우 사용
    - 입력한 역순으로 이전 명령을 불러옴

    몇 개까지?
    - $HISTSIZE=-1 ##무한 저장

    반복되는 명령은? 
    - $ HISTCCONTROL=ignoredups ##중복되는 명령어 하나만 저장

    - 모든 명령 히스토리는 $HISTFILE에 저장된다.

    #2 히스토리확장
    - 특별한 표현식을 활용하는 방법
    - 명령을 가져오고 실행까지 함
    - !! : 이전 명령
    - !70 : (히스토리 번호)
    - !-3

    - 장점: 쉽다.
    - 단점: 실행까지 되기 때문에 조심할 것 
      - :q - 확인하는것 
      - !! - 실행
      
ex) !<명령어> : 가장 마지막에 한 특정 명령 가져와서 실행
    runner@eb30c81203ad:~/OSS$ !grep
    grep Perl < animals.txt | wc -c > result.txt

    !70:p -> !!

Q. 이전 명령의 단어 수 세기
- stdout 으로 활용 할 수 있다는 점
runner@eb30c81203ad:~/OSS$ !! | wc -c

-파일을 삭제할때 
  - !$ : 이전 명령의 마지막 내용 
    - head grades ($)
    - alias rm='rm -i' ##삭제하기 전에 확인하라
  - !* : 인수 2개 이상일 경우 매칭


  #3 증분 검색
  - ctrl + r (누르기)
  - enter (선택)
  - ctrl + j, c,.. (운영체제마다 다름)

+요약 
  - 명령행 편집 효율적으로 잘하자.
